docker network create estate_prod_nw
a703590b349adb4141a8dba813fe1df419f2840a1396492c1257ea88dcbe0b6e

# po skonfigurowaniu pliku local.yml

docker compose -f local.yml config

# generuje poniższe 
name: api
services:
  api:
    build:
      context: D:\kreative-apartments\kreative-apartments\api
      dockerfile: ./docker/local/django/Dockerfile
    command:
      - /start
    container_name: estate_prod_api
    depends_on:
      mailpit:
        condition: service_started
        required: true
      postgres:
        condition: service_started
        required: true
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_FLOWER_PASSWORD: Pass12346
      CELERY_FLOWER_USER: admin
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DEFAULT_FROM_EMAIL: admin@alpha-apartments.com
      DJANGO_ADMIN_URL: supersecret/
      DJANGO_SECRET_KEY: CcDathkk-s12241ehndfK_Lz54QWpsEBTe5zrJv2pFSuzF8-04U
      EMAIL_HOST: mailpit
      EMAIL_PORT: "1025"
      POSTGRES_DB: estate
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: Pass123456
      POSTGRES_PORT: "5432"
      POSTGRES_USER: alphaogilo
      SITE_NAME: Alpha Apartments
    image: estate_prod_api
    networks:
      estate_prod_nw: null
    ports:
      - mode: ingress
        target: 8000
        published: "8000"
        protocol: tcp
    volumes:
      - type: bind
        source: D:\kreative-apartments\kreative-apartments\api
        target: /app
        bind:
          selinux: z
          create_host_path: true
      - type: bind
        source: D:\kreative-apartments\kreative-apartments\api\staticfiles
        target: /app/staticfiles
        bind:
          create_host_path: true
  mailpit:
    container_name: estate_prod_mailpit
    environment:
      MP_DATA_FILE: /data/mailpit.db
      MP_MAX_MESSAGES: "5000"
      MP_SMTP_AUTH_ACCEPT_ANY: "1"
      MP_SMTP_AUTH_ALLOW_INSECURE: "1"
    image: docker.io/axllent/mailpit:v1.15
    networks:
      estate_prod_nw: null
    ports:
      - mode: ingress
        target: 8025
        published: "8025"
        protocol: tcp
      - mode: ingress
        target: 1025
        published: "1025"
        protocol: tcp
    volumes:
      - type: volume
        source: estate_prod_mailpit_data
        target: /data
        volume: {}
  postgres:
    build:
      context: D:\kreative-apartments\kreative-apartments\api
      dockerfile: ./docker/local/postgres/Dockerfile
    container_name: estate_prod_postgres
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_FLOWER_PASSWORD: Pass123456
      CELERY_FLOWER_USER: admin
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DEFAULT_FROM_EMAIL:kreative-apartments@hotmailc.com
      DJANGO_ADMIN_URL: supersecret/
      DJANGO_SECRET_KEY: CcDathkk-s12241ehndfK_Lz54QWpsEBTe5zrJv2pFSuzF8-04U
      EMAIL_HOST: mailpit
      EMAIL_PORT: "1025"
      POSTGRES_DB: estate
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: Pass123456
      POSTGRES_PORT: "5432"
      POSTGRES_USER: piotrkreative
      SITE_NAME: Kreative Apartments
    image: estate_prod_postgres
    networks:
      estate_prod_nw: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    volumes:
      - type: volume
        source: estate_prod_postgres_data
        target: /var/lib/postgresql/data
        volume: {}
networks:
  estate_prod_nw:
    name: estate_prod_nw
    external: true
volumes:
  estate_prod_mailpit_data:
    name: api_estate_prod_mailpit_data
  estate_prod_postgres_data:
    name: api_estate_prod_postgres_data

# następnie polecenie
docker compose -f local.yml up --build -d --remove-orphans

# flaga kompilacji dash dash służy do budowania obrazów przed uruchomieniem kontenerów.
# flaga myślnika D służy do uruchamiania kontenerów w tle w trybie odłączonym.
# następnie polecenie dash dash remove orphans służy do usuwania kontenerów dla usług, które nie są zdefiniowane w utwórz plik

# gdyby wystąpił błąd polecenie do usunięcia kontenerów oraz woluminów
docker compose -f local.yml down -v