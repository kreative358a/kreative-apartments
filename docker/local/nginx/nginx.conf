# nginx algorytm kołowy

upstream api {
  server api:8000;
}

# dyrektywa map nginx utworzy mapowanie pomiędzy zmienną źródłową a wartością wynikową.
map $http_upgrade $connection_upgrade {
  # mapujemy naszą domyślną opcję aktualizacji default upgrade;
  default upgrade;
  '' close;
}

# tworzymy kolejny serwer nadrzędny
upstream client {
  # Serwer będzie usługą kliencką zdefiniowaną w naszym lokalnym pliku HTML i działa na porcie 3000.
  server client:3000;
}

# deklarujemy blok serwera, określający konfigurację głównego serwera nginx, działającego jako odwrotny serwer proxy
server {
  # deklarujemy porty, na których serwer będzie nasłuchiwał
  listen 80;
  # maksymalny dozwolony rozmiar treści żądania klienta
  client_max_body_size 20M;
  # miejsce przechowywania dzienników błędów
  error_log /var/log/nginx/error.log error;

  # dyrektywa proxy kluczowa dla naszego interfejsu API zaplecza, 
  # określa nazwę domeny serwera dla hostingu wirtualnego i numer portu TCP
  proxy_set_header Host $host;
  # rzeczywisty nagłówek IP w żądaniu przekazywanym do serwera proxy.
  # mienna nginx, która przechowuje adres IP klienta wysyłającego żądanie do nginx
  proxy_set_header X-Real-IP $remote_addr;
  
  # nagłówek do podania adresu IP oryginalnego klienta, 
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # nagłówek proto x-forwarded-for w żądaniu
  proxy_set_header X-Forwarded-Proto $scheme;
  # nagłówek uaktualnienia
  proxy_http_version 1.1;
  # nagłówek proxy z prośbą o uaktualnienie
  proxy_set_header Upgrade $http_upgrade;
  # nagłówek proxy do uaktualnienia połączenia
  proxy_set_header Connection $connection_upgrade;

  # blok lokalizacji
  location /api/v1/ {
    proxy_pass http://api;
    access_log /var/log/nginx/api_access.log;  
    error_log /var/log/nginx/api_error.log error;
  }

  # blok lokalizacji dla administratora django
  location /supersecret {
    proxy_pass http://api;
    access_log /var/log/nginx/admin_access.log;
  }

  # blok lokalizacji
  location /redoc {
    proxy_pass http://api;
  }

  # blok lokalizacji
  location /api/v1/auth/google {
    proxy_pass http://client/google;
  }

  # blok lokalizacji
  location / {
    proxy_pass http://client;
  }

  # używamy nginx, a nie domyślnego serwera Django, do obsługi plików statycznych
  location /static/ {
    # włączymy buforowanie plików statycznych
    alias /app/staticfiles/;
    # określamy że pamięć podręczna wygasa po 30 dniach.
    # rozszerza się to do dyrektywy, która mówi nginx, aby buforował określone pliki dla określonego czasu
    expires 30d;
    # nagłówek będący kontrolą pamięci podręcznej
    # maksymalny wiek czyli 30 dni
    add_header Cache-Control "public, max-age=2592000";

  }
}