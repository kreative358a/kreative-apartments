# is no needed from docker version 26
# version: "3.9"

# kontenery, które chcemy uruchomić w aplikacji.
services:
  api: &api
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    image: estate_prod_api
    container_name: estate_prod_api
    volumes: 
      - .:/app:z     
      - ./staticfiles:/app/staticfiles

    # Udostępnimy port 8000 innym kontenerom w tej samej sieci Docker    
    expose:
      - "8000"

    # zmienne środowiskowe
    env_file:
      - ./.envs/.env.local
    depends_on:
      # Postgres będzie naszą bazą danych.
      - postgres
      # skrzynka pocztowa będzie naszą usługą pocztową, z której będziemy korzystać w trakcie rozwoju.
      - mailpit
      - redis
    command: /start
    # deklarujemy sieci które będą służyć do łączenia ze sobą usług.
    networks:
      - estate_prod_nw

  # deklarujemy kolejną usługę.
  postgres:
    build:
      context: .
      dockerfile: ./docker/local/postgres/Dockerfile
    image: estate_prod_postgres
    # nazwa naszego kontenera może być stanem, produkcją lub Postgresem.
    container_name: estate_prod_postgres
    ports:
      - "5432:5432"
    volumes:
      - estate_prod_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.env.local
    networks:
      - estate_prod_nw

  # deklarujemy kolejną usługę będącą serwerem SMTP
  mailpit:
    image: docker.io/axllent/mailpit:v1.15
    container_name: estate_prod_mailpit
    ports: 
      - "8025:8025"
      - "1025:1025"
    volumes:  
      - estate_prod_mailpit_data:/data

    # deklarujemy zmienne środowiskowe mailpit
    environment:
      # maksymalna liczba wiadomości
      MP_MAX_MESSAGES: 5000
      # plik z danymi skrzynki pocztowej
      MP_DATA_FILE: /data/mailpit.db
      # mailpit ma akceptować dowolną nazwę użytkownika i hasło SMTP, w tym żadne
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      # włączamy niezabezpieczone uwierzytelnianie zwykłe i logowanie
      MP_SMTP_AUTH_ALLOW_INSECURE: 1  
    networks:
      - estate_prod_nw

  # budujemy usługę klienta
  client:
    build:
      context: ./client
      dockerfile: ./docker/local/Dockerfile
    container_name: estate_client
    image: estate_client

    # Udostępnimy port 3000 innym kontenerom w tej samej sieci Docker
    expose:
      - "3000"
    
    volumes:
      # montujemy katalog klienta z komputera hosta do katalogu aplikacji wewnątrz
      - ./client:/app
      # tworzymy anonimowy wolumin dla katalogu modułów węzła
      - /app/node_modules
    environment:
      - WATCHPACK_POLLING=true
    networks:
      - estate_prod_nw

  redis:
    image: redis:7.0-alpine3.19
    # polecenie append only włącza trwałość pliku append only
    command: redis-server --appendonly yes
    container_name: estate_redis
    volumes:
      - estate_redis_prod_data:/data
    networks:
      - estate_prod_nw

  celeryworker:
    # określamy wykorzystanie kotwicy
    <<: *api
    image: estate_prod_celeryworker
    container_name: estate_prod_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *api
    image: estate_prod_celerybeat
    container_name: estate_prod_celerybeat
    command: /start-celerybeat

  flower:
    <<: *api
    image: estate_prod_flower
    container_name: estate_prod_flower
    ports:
      - "5555:5555"
    command: /start-flower

  # deklarujemy naszą usługę nginx
  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile 
    restart: always
    container_name: estate_nginx 
    ports:
      - "8080:80"
    volumes:
      # wolumin plików statycznych
      - ./staticfiles:/app/staticfiles
      # wolumin, w którym będą przechowywane nasze logi.
      - logs_store:/var/log/nginx
    depends_on:
      - api
    networks:
      - estate_prod_nw
    

networks:
  estate_prod_nw:
    external: true

volumes:
  estate_prod_postgres_data: {}
  estate_prod_mailpit_data: {}
  logs_store: {}
  estate_redis_prod_data: {}